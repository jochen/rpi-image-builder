#!/bin/bash
# Change the SRC path if needed:
SRC=https://downloads.raspberrypi.org/raspbian_lite_latest

set -e
mkdir raspbian-tmp
cd raspbian-tmp
echo Download image...
wget --trust-server-names $SRC
unzip *.zip && rm *.zip
DISK_IMG=$(ls *.img | sed 's/.img$//')
ROOTOFFSET=$(fdisk -lu $DISK_IMG.img | sed -n "s/\(^[^ ]*img2\)\s*\([0-9]*\)\s*\([0-9]*\)\s*\([0-9]*\).*/\2/p")
echo "ROOTOFFSET $ROOTOFFSET"
BOOTOFFSET=$(fdisk -lu $DISK_IMG.img | sed -n "s/\(^[^ ]*img1\)\s*\([0-9]*\)\s*\([0-9]*\)\s*\([0-9]*\).*/\2/p")
echo "BOOTOFFSET $BOOTOFFSET"
BOOTEND=$(fdisk -lu $DISK_IMG.img | sed -n "s/\(^[^ ]*img1\)\s*\([0-9]*\)\s*\([0-9]*\)\s*\([0-9]*\).*/\4/p")
echo "BOOTEND $BOOTEND"

mkdir root
mount -o loop,offset=$(($ROOTOFFSET*512)) $DISK_IMG.img root
# Disable preloaded shared library to get everything including networking to work on x86
mv root/etc/ld.so.preload root/etc/ld.so.preload.bak
test -d root/boot || mkdir root/boot

dd if=$DISK_IMG.img of=root/boot/mbr.bin bs=512 count=1
dd if=$DISK_IMG.img of=root/boot/boot.bin bs=512 skip=$[$BOOTOFFSET] count=$[$BOOTEND]

cp /usr/bin/qemu-arm-static root/usr/bin

# Create docker images
cd root
tar -c . | docker import - raspbian-lite:latest raspbian-lite:$DISK_IMG
cd ..

# Clean-up
umount root
rmdir root
rm $DISK_IMG.img
docker images | grep raspbian

echo Test the image with:
echo docker run -ti --rm raspbian-lite:$DISK_IMG /bin/bash -c \'uname -a\'
if docker run -ti --rm raspbian-lite:$DISK_IMG /bin/bash -c 'uname -a' | grep armv7l; then echo OK; else echo FAIL; fi

